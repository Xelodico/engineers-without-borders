/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package BoardGame;

/**
 *
 * @author Nathan Watkins
 */
import javax.swing.*;
import java.awt.*;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class BoardGame extends JFrame {

    final int GRID_COLUMNS = 10;
    final int GRID_ROWS = GRID_COLUMNS;

    public static List<String> gridDistribution(int totalSquares, List<Integer> spawnLocations) {
        int[] distributionRatio = {1, 2, 2, 3}; //Knowledge : Pothole : Resource : Normal ratio

        int totalWeight = Arrays.stream(distributionRatio).sum();
        int numKnowledge = totalSquares / totalWeight * distributionRatio[0];
        int numPothole = totalSquares / totalWeight * distributionRatio[1];
        int numResource = totalSquares / totalWeight * distributionRatio[2];
        int numNormal = totalSquares / totalWeight * distributionRatio[3];

        List<String> squareTypes = new ArrayList<>();
        for (int i = 0; i < numNormal; i++) {
            squareTypes.add("Normal");
        }
        for (int i = 0; i < numPothole; i++) {
            squareTypes.add("Pothole");
        }
        for (int i = 0; i < numResource; i++) {
            squareTypes.add("Resource");
        }
        for (int i = 0; i < numKnowledge; i++) {
            squareTypes.add("Knowledge");
        }

        Collections.shuffle(squareTypes);

        for (int location : spawnLocations) {
            squareTypes.add(location, "Spawn");
        }

        return squareTypes;
    }

    /**
     * Creates new form NewJFrame
     */
    public BoardGame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        //final int GRID_COLUMNS = 5;
        //final int GRID_ROWS = GRID_COLUMNS;

        int totalSquares = GRID_COLUMNS*GRID_ROWS;
        final List<Integer> spawnLocations = Arrays.asList(0, GRID_COLUMNS-1, totalSquares-GRID_COLUMNS, totalSquares-1);

        List<String> squareTypes = gridDistribution(totalSquares, spawnLocations);
        gridContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        for (int i = 0; i < (GRID_COLUMNS*GRID_ROWS); i++) {
            JPanel panel = new JPanel();
            panel.setPreferredSize(new Dimension(40, 40));
            panel.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));

            String squareType = squareTypes.get(i);
            switch (squareType) {
                case "Normal":
                panel.setBackground(Color.WHITE);
                break;
                case "Pothole":
                panel.setBackground(Color.RED);
                break;
                case "Knowledge":
                panel.setBackground(Color.BLUE);
                break;
                case "Resource":
                panel.setBackground(Color.ORANGE);
                break;
                case "Spawn":
                panel.setBackground(Color.GREEN);
                break;
            }

            gridContainer.add(panel);
        }
        gridContainer.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        gridContainer.setLayout(new java.awt.GridLayout(GRID_ROWS, GRID_COLUMNS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gridContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(312, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gridContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoardGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gridContainer;
    // End of variables declaration//GEN-END:variables
}
